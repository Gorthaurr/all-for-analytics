'use client'

import React from 'react';
import { Input } from '@/components/Base/Input';
import { Button } from '@/components/Base/Button';
import { Toggle } from '@/components/Base/Toggle';
import { Dropdown } from '@/components/Base/Dropdown';

interface PropertyPanelProps {
  selectedNode?: {
    id: string;
    type: 'entity' | 'attribute' | 'relationship';
    name: string;
    properties?: Record<string, any>;
  } | null;
  onUpdateNode?: (id: string, updates: any) => void;
  className?: string;
}

export const PropertyPanel: React.FC<PropertyPanelProps> = ({
  selectedNode,
  onUpdateNode,
  className = ''
}) => {
  const [name, setName] = React.useState(selectedNode?.name || '');
  const [isKey, setIsKey] = React.useState(selectedNode?.properties?.isKey || false);
  const [isRequired, setIsRequired] = React.useState(selectedNode?.properties?.isRequired || false);
  const [cardinality, setCardinality] = React.useState(selectedNode?.properties?.cardinality || '1:N');

  React.useEffect(() => {
    if (selectedNode) {
      setName(selectedNode.name);
      setIsKey(selectedNode.properties?.isKey || false);
      setIsRequired(selectedNode.properties?.isRequired || false);
      setCardinality(selectedNode.properties?.cardinality || '1:N');
    }
  }, [selectedNode]);

  const handleSave = () => {
    if (selectedNode && onUpdateNode) {
      onUpdateNode(selectedNode.id, {
        name,
        properties: {
          ...selectedNode.properties,
          isKey,
          isRequired,
          cardinality
        }
      });
    }
  };

  const cardinalityOptions = [
    { value: '1:1', label: '1:1 (–û–¥–∏–Ω –∫ –æ–¥–Ω–æ–º—É)' },
    { value: '1:N', label: '1:N (–û–¥–∏–Ω –∫–æ –º–Ω–æ–≥–∏–º)' },
    { value: 'N:1', label: 'N:1 (–ú–Ω–æ–≥–∏–µ –∫ –æ–¥–Ω–æ–º—É)' },
    { value: 'M:N', label: 'M:N (–ú–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º)' }
  ];

  if (!selectedNode) {
    return (
      <div className={`
        p-4 bg-white/80 dark:bg-gray-800/80
        backdrop-blur-xl border border-white/20 dark:border-gray-700/20
        rounded-xl shadow-lg
        ${className}
      `}>
        <h3 className="text-sm font-semibold text-gray-900 dark:text-white mb-4">
          ‚öôÔ∏è –°–≤–æ–π—Å—Ç–≤–∞
        </h3>
        <div className="text-center text-gray-500 dark:text-gray-400 py-8">
          <div className="text-4xl mb-2">üìù</div>
          <p className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`
      p-4 bg-white/80 dark:bg-gray-800/80
      backdrop-blur-xl border border-white/20 dark:border-gray-700/20
      rounded-xl shadow-lg
      ${className}
    `}>
      <h3 className="text-sm font-semibold text-gray-900 dark:text-white mb-4">
        ‚öôÔ∏è –°–≤–æ–π—Å—Ç–≤–∞ {selectedNode.type === 'entity' ? '—Å—É—â–Ω–æ—Å—Ç–∏' : 
                     selectedNode.type === 'attribute' ? '–∞—Ç—Ä–∏–±—É—Ç–∞' : '—Å–≤—è–∑–∏'}
      </h3>

      <div className="space-y-4">
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
        <div>
          <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-2">
            –ù–∞–∑–≤–∞–Ω–∏–µ
          </label>
          <Input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
          />
        </div>

        {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ */}
        {selectedNode.type === 'attribute' && (
          <>
            <Toggle
              checked={isKey}
              onChange={setIsKey}
              label="üîë –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á"
            />
            <Toggle
              checked={isRequired}
              onChange={setIsRequired}
              label="‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"
            />
          </>
        )}

        {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–≤—è–∑–µ–π */}
        {selectedNode.type === 'relationship' && (
          <div>
            <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ú–æ—â–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏
            </label>
            <Dropdown
              options={cardinalityOptions}
              value={cardinality}
              onChange={setCardinality}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–≤—è–∑–∏"
            />
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <Button
          variant="primary"
          size="sm"
          onClick={handleSave}
          className="w-full"
        >
          üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </Button>
      </div>
    </div>
  );
};

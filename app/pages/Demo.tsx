'use client'

import { useState } from 'react'
import { 
  Button, 
  Card, 
  Input, 
  Modal, 
  Dropdown, 
  Toggle, 
  Progress, 
  Badge,
  Carousel,
  Header,
  Footer,
  MainContent,
  EnvironmentToggle,
  Search
} from '@/components/Base'
import {
  EntityNode,
  AttributeNode,
  RelationshipNode,
  ConnectionLine,
  NodeToolbar,
  PropertyPanel,
  DiagramToolbar,
  Minimap,
  ValidationPanel,
  ExportTools
} from '@/components/ERD'

export default function Demo() {
  const [modalOpen, setModalOpen] = useState(false)
  const [dropdownValue, setDropdownValue] = useState('')
  const [toggleValue, setToggleValue] = useState(false)
  const [progressValue, setProgressValue] = useState(65)
  const [searchResults, setSearchResults] = useState<string[]>([])
  
  // ERD —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [selectedERDNode, setSelectedERDNode] = useState<any>(null)
  const [erdNodes, setErdNodes] = useState([
    { id: '1', type: 'entity', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', x: 20, y: 20 },
    { id: '2', type: 'attribute', name: 'ID', x: 320, y: 20, isKey: true },
    { id: '3', type: 'relationship', name: '–ò–º–µ–µ—Ç', x: 500, y: 20, cardinality: '1:N' as const }
  ])
  const [erdConnections] = useState([
    { id: '1', from: '1', to: '2', type: 'one-to-many' }
  ])

  const handleSearch = (query: string) => {
    console.log('–ü–æ–∏—Å–∫:', query)
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    setSearchResults([
      `–†–µ–∑—É–ª—å—Ç–∞—Ç 1 –¥–ª—è "${query}"`,
      `–†–µ–∑—É–ª—å—Ç–∞—Ç 2 –¥–ª—è "${query}"`,
      `–†–µ–∑—É–ª—å—Ç–∞—Ç 3 –¥–ª—è "${query}"`
    ])
  }

  const handleClearSearch = () => {
    setSearchResults([])
  }

  const dropdownOptions = [
    { value: 'option1', label: '–û–ø—Ü–∏—è 1' },
    { value: 'option2', label: '–û–ø—Ü–∏—è 2' },
    { value: 'option3', label: '–û–ø—Ü–∏—è 3' }
  ]

  const carouselItems = [
    {
      id: '1',
      title: 'üçé Apple Design',
      description: '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω –≤ —Å—Ç–∏–ª–µ Apple —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
      content: (
        <div className="flex gap-4 justify-center mt-6">
          <Badge variant="default">–ú–∏–Ω–∏–º–∞–ª–∏–∑–º</Badge>
          <Badge variant="success">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</Badge>
          <Badge variant="info">–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å</Badge>
        </div>
      )
    },
    {
      id: '2',
      title: 'üíß Liquid Glass',
      description: '–ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º —Å–æ–∑–¥–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç –∂–∏–¥–∫–æ–≥–æ —Å—Ç–µ–∫–ª–∞',
      content: (
        <div className="flex gap-4 justify-center mt-6">
          <Badge variant="warning">–ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å</Badge>
          <Badge variant="error">–†–∞–∑–º—ã—Ç–∏–µ</Badge>
          <Badge variant="info">–ì–ª—É–±–∏–Ω–∞</Badge>
        </div>
      )
    },
    {
      id: '3',
      title: '‚ö° –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      description: 'Next.js 14, TypeScript, Tailwind CSS –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∏ –∫—Ä–∞—Å–∏–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
      content: (
        <div className="flex gap-4 justify-center mt-6">
          <Badge variant="default">Next.js</Badge>
          <Badge variant="success">TypeScript</Badge>
          <Badge variant="warning">Tailwind</Badge>
        </div>
      )
    }
  ]

  return (
    <>
      <Header 
        title="üçé Analytics Project"
        subtitle="‚ú® BPMN-–ø–æ–¥–æ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–∏–∑–∞–π–Ω–æ–º Apple"
      />
      
      <MainContent layout="grid">

        {/* –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ */}
        <div className="col-span-3 space-y-4">
            <Card variant="elevated">
              <h3 className="text-lg font-semibold mb-4">üîç –ü–æ–∏—Å–∫</h3>
              <div className="space-y-3">
                <Search
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É..."
                  onSearch={handleSearch}
                  onClear={handleClearSearch}
                  showClearButton={true}
                />
                {searchResults.length > 0 && (
                  <div className="mt-4 space-y-2">
                    <h4 className="text-sm font-medium text-gray-600 dark:text-gray-400">
                      –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:
                    </h4>
                    {searchResults.map((result, index) => (
                      <div 
                        key={index}
                        className="p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg text-sm"
                      >
                        {result}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </Card>

            <Card variant="elevated">
              <h3 className="text-lg font-semibold mb-4">üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h3>
              <div className="space-y-3">
                <Button variant="primary" size="lg" className="w-full">
                  ‚ú® –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                </Button>
                <Button variant="secondary" className="w-full">
                  üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                </Button>
                <Button variant="ghost" className="w-full">
                  üìã –®–∞–±–ª–æ–Ω—ã
                </Button>
              </div>
            </Card>

            <Card variant="glass">
              <h3 className="text-lg font-semibold mb-4">üìù –§–æ—Ä–º—ã</h3>
              <div className="space-y-4">
                <Input
                  type="email"
                  placeholder="üìß Email"
                />
                <Input
                  type="password"
                  placeholder="üîí –ü–∞—Ä–æ–ª—å"
                />
                <Dropdown
                  options={dropdownOptions}
                  value={dropdownValue}
                  onChange={setDropdownValue}
                  placeholder="üìã –í—ã–±–µ—Ä–∏—Ç–µ"
                />
                <Toggle
                  checked={toggleValue}
                  onChange={setToggleValue}
                  label="üîò –ù–∞—Å—Ç—Ä–æ–π–∫–∞"
                />
              </div>
            </Card>
          </div>

        {/* –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ - –†–ê–ë–û–ß–ï–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û */}
        <div className="col-span-6">
            <Card variant="elevated" className="h-full">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-semibold">üéØ –†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</h3>
                <div className="flex gap-2">
                  <Badge variant="success">–ê–∫—Ç–∏–≤–Ω–æ</Badge>
                  <Badge variant="info">BPMN</Badge>
                </div>
              </div>
              
              {/* –ö–∞—Ä—É—Å–µ–ª—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
              <Carousel 
                items={carouselItems}
                autoPlay={true}
                autoPlayInterval={4000}
                showDots={true}
                showArrows={true}
              />
            </Card>
          </div>

        {/* –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–í–û–ô–°–¢–í–ê –ò –ü–†–û–ì–†–ï–°–° */}
        <div className="col-span-3 space-y-4">
            <Card variant="glass">
              <h3 className="text-lg font-semibold mb-4">‚öôÔ∏è –°–≤–æ–π—Å—Ç–≤–∞</h3>
              <div className="space-y-4">
                <Progress 
                  value={progressValue} 
                  variant="default" 
                  size="lg"
                />
                <div className="flex gap-2">
                  <Button 
                    variant="secondary" 
                    size="sm"
                    onClick={() => setProgressValue(Math.max(0, progressValue - 10))}
                  >
                    ‚ûñ
                  </Button>
                  <Button 
                    variant="secondary" 
                    size="sm"
                    onClick={() => setProgressValue(Math.min(100, progressValue + 10))}
                  >
                    ‚ûï
                  </Button>
                </div>
              </div>
            </Card>

            <Card variant="elevated">
              <h3 className="text-lg font-semibold mb-4">üè∑Ô∏è –°—Ç–∞—Ç—É—Å—ã</h3>
              <div className="space-y-2">
                <Badge variant="default" className="w-full justify-center">üìò Default</Badge>
                <Badge variant="success" className="w-full justify-center">‚úÖ Success</Badge>
                <Badge variant="warning" className="w-full justify-center">‚ö†Ô∏è Warning</Badge>
                <Badge variant="error" className="w-full justify-center">‚ùå Error</Badge>
              </div>
            </Card>

            <Card variant="glass">
              <div className="text-center space-y-4">
                <h3 className="text-lg font-semibold">ü™ü –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ</h3>
                <Button 
                  variant="primary" 
                  onClick={() => setModalOpen(true)}
                  className="w-full"
                >
                  –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
                </Button>
              </div>
            </Card>
           </div>

        {/* –°–ï–ö–¶–ò–Ø: ERD –ö–û–ú–ü–û–ù–ï–ù–¢–´ */}
        <div className="mb-12">
          <h2 className="text-3xl font-bold text-center mb-8 bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 bg-clip-text text-transparent">
            ERD –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
          </h2>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
            <div className="space-y-6">
              <NodeToolbar
                onAddEntity={() => console.log('Add Entity')}
                onAddAttribute={() => console.log('Add Attribute')}
                onAddRelationship={() => console.log('Add Relationship')}
              />
              
              <PropertyPanel
                selectedNode={selectedERDNode}
                onUpdateNode={(id: string, updates: any) => console.log('Update node:', id, updates)}
              />
              
              <ValidationPanel
                issues={[
                  { id: '1', type: 'warning', message: '–°—É—â–Ω–æ—Å—Ç—å –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤', nodeId: 'entity_1' }
                ]}
                onIssueClick={(issue: any) => console.log('Issue clicked:', issue)}
              />
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –î–∏–∞–≥—Ä–∞–º–º–∞ */}
            <div className="space-y-6">
              <DiagramToolbar
                onSave={() => console.log('Save')}
                onLoad={() => console.log('Load')}
                onClear={() => console.log('Clear')}
                onExport={(format: any) => console.log('Export:', format)}
                onZoomIn={() => console.log('Zoom In')}
                onZoomOut={() => console.log('Zoom Out')}
                onZoomReset={() => console.log('Zoom Reset')}
              />
              
              <div className="relative h-96 w-full bg-gray-100/50 dark:bg-gray-700/50 rounded-xl border border-gray-200/30 dark:border-gray-600/30 overflow-hidden">
                {/* –ú–∏–Ω–∏-–¥–∏–∞–≥—Ä–∞–º–º–∞ —Å —É–∑–ª–∞–º–∏ */}
                <div className="relative w-full h-full">
                  {erdNodes.map((node) => {
                    const commonProps = {
                      key: node.id,
                      id: node.id,
                      name: node.name,
                      x: node.x,
                      y: node.y,
                      isSelected: selectedERDNode?.id === node.id,
                      onSelect: setSelectedERDNode,
                      onMove: (id: string, x: number, y: number) => {
                        setErdNodes(prev => prev.map(n => n.id === id ? {...n, x, y} : n))
                      }
                    };

                    switch (node.type) {
                      case 'entity':
                        return <EntityNode {...commonProps} />;
                      case 'attribute':
                        return <AttributeNode {...commonProps} isKey={node.isKey} />;
                      case 'relationship':
                        return <RelationshipNode {...commonProps} cardinality={node.cardinality} />;
                      default:
                        return null;
                    }
                  })}
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <Minimap
                  nodes={erdNodes.map(node => ({ id: node.id, type: node.type, x: node.x, y: node.y }))}
                  connections={erdConnections.map(conn => ({ id: conn.id, from: { x: 0, y: 0 }, to: { x: 0, y: 0 } }))}
                  viewport={{ x: 0, y: 0, width: 400, height: 200 }}
                  onViewportChange={() => {}}
                />
                
                <ExportTools
                  onExportPNG={() => console.log('Export PNG')}
                  onExportSVG={() => console.log('Export SVG')}
                  onExportJSON={() => console.log('Export JSON')}
                  onExportPDF={() => console.log('Export PDF')}
                />
              </div>
            </div>
          </div>
        </div>
       </MainContent>

      {/* –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û */}
      <Modal
          isOpen={modalOpen}
          onClose={() => setModalOpen(false)}
          title="üéâ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
          size="md"
        >
          <div className="space-y-4">
            <p className="text-gray-600 dark:text-gray-400">
              –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å liquid glass —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏! 
              –û–Ω–æ –∏–º–µ–µ—Ç –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º.
            </p>
            <div className="flex gap-3 justify-end">
              <Button 
                variant="ghost" 
                onClick={() => setModalOpen(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button 
                variant="primary" 
                onClick={() => setModalOpen(false)}
              >
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
              </Button>
            </div>
          </div>
      </Modal>

      <Footer 
        copyright="¬© 2024 Analytics Project. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã."
        links={[
          { label: '–û –ø—Ä–æ–µ–∫—Ç–µ', href: '/about' },
          { label: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', href: '/docs' },
          { label: 'GitHub', href: 'https://github.com' }
        ]}
      />
    </>
  )
}
